//
//  Maze.swift
//  GraphAlgorithms
//
//  Created by Kristina Gelzinyte on 8/29/18.
//  Copyright Â© 2018 Kristina Gelzinyte. All rights reserved.
//

import UIKit

// A maze object generated by Depth-first search algorithm.
class Maze {
    
    // MARK: - Properties
    
    weak var delegate: MazeDelegate? = nil
    
    var actionIndex = 0

    private(set) var vertexList = [Vertex]()
    
    private(set) var columns: Int
    private(set) var rows: Int
    
    private var mazeSize: VertexListSize {
        return VertexListSize(columns: columns, rows: rows)
    }
    
    // MARK: - Initialization
    
    /// Returns a maze object.
    ///
    /// - Parameters:
    ///     - columns: Column number for the maze.
    ///     - rows: Row number for the maze.
    init(columns: Int, rows: Int) {
        self.columns = columns
        self.rows = rows
    }
    
    /// Sets up a new maze.
    func setupDF() {
        reset()

        setupRawVertexList(columns: columns, rows: rows)
        fillUpDFVertexList()
    }
    
    /// Sets up a new maze.
    func setupBF() {
        reset()
        
        setupRawVertexList(columns: columns, rows: rows, hasIgnoredVertex: true)
        fillUpBFVertexList()
    }
    
    /// Sets up a new maze.
    func setupDijkstras() {
        reset()
        
        setupRawVertexList(columns: columns, rows: rows, hasIgnoredVertex: true)
        fillUpDijkstrasVertexList()
    }
    
    /// Resets existing maze.
    private func reset() {
        vertexList = []
        actionIndex = 0
    }
    
    // MARK: - Vertex list set up
    
    /// Initialized empty matrix of size: columns x rows.
    ///
    /// - Parameters:
    ///     - columns: Column number for the maze.
    ///     - rows: Row number for the maze.
    private func setupRawVertexList(columns: Int, rows: Int, hasIgnoredVertex: Bool = false) {
        let maxIndex = columns * rows
        
        for index in 0..<maxIndex {
            let vertex = Vertex(index: index)
            vertexList.append(vertex)
        }
        
        if hasIgnoredVertex {
            var vertexObstacleIndexList = [Int]()
            for _ in 0...10 {
                let randomIndex = Int.random(min: 0, max: vertexList.count - 1)
                vertexObstacleIndexList.append(randomIndex)
                vertexList[randomIndex].isIgnored = true
            }
            delegate?.maze(self, ignoredVertexIndexList: vertexObstacleIndexList)
        }
    }
    
    /// Runs Depth-first search algorithm to setup Vertex list for maze.
    private func fillUpDFVertexList() {
        let depthFirstAlgorithm = DepthFirstSearchAlgorithm()
        depthFirstAlgorithm.delegate = self
        vertexList = depthFirstAlgorithm.search(in: vertexList, size: mazeSize)
    }
    
    /// Runs Depth-first search algorithm to setup Vertex list for maze.
    private func fillUpBFVertexList() {
        let breadthFirstAlgorithm = BreadthFirstSearchAlgorithm()
        breadthFirstAlgorithm.delegate = self
        vertexList = breadthFirstAlgorithm.search(in: vertexList, size: mazeSize)
    }
    
    /// Runs Depth-first search algorithm to setup Vertex list for maze.
    private func fillUpDijkstrasVertexList() {
        let dijkstrasAlgorithm = DijkstrasPriorityQueueAlgorithm()
        dijkstrasAlgorithm.delegate = self
        vertexList = dijkstrasAlgorithm.search(in: vertexList, size: mazeSize)
    }
}

/// The object that acts as the delegate of the `Maze`.
///
/// The delegate must adopt the MazeDelegate protocol.
///
/// The delegate object is responsible for managing the maze vertex update.
protocol MazeDelegate: class {
    
    /// Tells the delegate that vertex was updated.
    ///
    /// - Parameters:
    ///     - maze: An object of the maze.
    ///     - vertex: A vertex node to be updated.
    ///     - actionIndex: Index of update action in maze setup sequence.
    func maze(_ maze: Maze, didUpdate vertex: Vertex, actionIndex: Int)
    
    /// Informs the delegate about obstacle type vertex index.
    ///
    /// - Parameters:
    ///     - maze: An object of the maze.
    ///     - ignoredVertexIndexList: A list of vertex indexes who needs to be ignored.
    func maze(_ maze: Maze, ignoredVertexIndexList: [Int])
}
